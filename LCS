// longest Common Subsequence
int LCS(string s1, string s2) {
    if (s1.length() == 0 || s2.length() == 0) {
        return 0;
    }
    if (s1[0] == s2[0]) {
        return 1 + LCS(s1.substr(1), s2.substr(1));
    }
    
    int include = LCS(s1.substr(1), s2);
    int exclude = LCS(s1, s2.substr(1));
    
    return max(include, exclude);
}


// Check this ******************************************************************************************************************
#include <bits/stdc++.h>

using namespace std;

  int LCSubstr(string s1, string s2, vector<vector<int>>& dp, int sum) {
    if (s1.length() == 0 || s2.length() == 0) {
        return sum;
    }
    if (dp[s1.length()][s2.length()] != -1) {
        return dp[s1.length()][s2.length()];
    }
    int maxValue = 0;
    int currentValue = 0;
    
    if (s1[0] == s2[0]) {
        cout<<s1[0]<<"  "<<s2[0]<<" "<<" match "<<sum<<endl;
        cout<<s1.substr(1)<<"  "<<s2.substr(1)<<" substr after match "<<endl;
        currentValue = LCSubstr(s1.substr(1), s2.substr(1), dp, sum+1);
    }
    // cout<<s1<<"  "<<s2<<"   "<<sum<<"  "<<s1.length()<<" "<<s2.length()<<endl;
    int include = LCSubstr(s1,s2.substr(1), dp, 0);
    int exclude = LCSubstr(s1.substr(1), s2, dp, 0);
    maxValue = max(max(currentValue, sum) , max(include, exclude));
    cout<<s1<<"  "<<s2<<"   "<<sum<<"  "<<s1.length()<<" "<<s2.length()<<endl;
    dp[s1.length()][s2.length()] = maxValue;
    return maxValue;
}
    
    int longestCommonSubstr (string S1, string S2, int n, int m)
    {
        int sum = 0;
        // your code here
    vector<vector<int>> my_2d_vector(n+1, vector<int>(m+1, -1));

        return LCSubstr(S1,S2, my_2d_vector, sum);
    }
*********************************************************************************************************************************    


// Print LCS

string longestCommonSub(string s1, string s2) {
    if (s1.length() == 0 || s2.length() == 0) {
        return "";
    }
    
    if (s1[0] == s2[0]) {
        return s1[0] + longestCommonSub(s1.substr(1),s2.substr(1));
    }
    
    string s3 = longestCommonSub(s1, s2.substr(1));
    string s4 = longestCommonSub(s1.substr(1), s2);
    
    return s3.length() > s4.length() ? s3 : s4;
}

// Print SCS
string shortestCommonSupersequence(const string str1, const string str2) {
    // Base cases: if either of the strings is empty
    if (str1.length() == 0) {
        return str2;
    }
    if (str2.length() == 0) {
        return str1;
    }

    // If the last characters match
    if (str1[0] == str2[0]) {
        string str3 = str1[0] + shortestCommonSupersequence(str1.substr(1), str2.substr(1));
        return str3;
    }
    // If the last characters don't match
    string first = str1[0] + shortestCommonSupersequence(str1.substr(1), str2);
    string second = str2[0] + shortestCommonSupersequence(str1, str2.substr(1));

    // Return the shorter supersequence
    return (first.length() < second.length()) ? first : second;
}





// Print longest repeating subsequence with diff index

string longestRepeatingSubsequence(string s1, string s2, int i, int j) {
    // S1 = S2 = "AABEBCDD" -> ABD
    if (s1.length() == i || s2.length() == j) {
        return "";
    }
    if (s1[i] == s2[j] && i != j) {
        return s1[i] + longestRepeatingSubsequence(s1, s2, i+1, j+1);
    }
    
    string include = longestRepeatingSubsequence(s1,s2, i, j+1);
    string exclude = longestRepeatingSubsequence(s1, s2, i+1, j);
    
    return include.length() > exclude.length() ? include : exclude;
}




